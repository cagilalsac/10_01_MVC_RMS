@model RoleModel

@* Generated from Custom Template. *@
@* Model namespace using directive should be added to _ViewImports.cshtml. *@

@{
    var containerDivClass = "container";
}
@{
    ViewData["Title"] = "Role Delete";
}

<div class="@containerDivClass">
    <h3>@ViewData["Title"]</h3>
    <hr />
</div>

@if (Model is not null)
{
<div class="@containerDivClass">
    @if (TempData["Message"] is not null)
    {
    <p class="text-danger">
        @TempData["Message"]
    </p>
    }
    <h3 class="text-danger">Are you sure you want to delete?</h3>
    <hr />
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @Html.DisplayNameFor(model => model.Name)
        </div>
        <div class="col-10">
            @Html.DisplayFor(model => model.Name)
        </div>
    </div>

    @* Users: property for formatted or relational data in the model *@
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @Html.DisplayNameFor(model => model.Users)
        </div>
        <div class="col-10">
            @Html.Raw(Model.Users)
        </div>
    </div>

@* Can be uncommented and used for many to many relationships. {Entity} may be replaced with the related entiy name in the controller and views. *@
    @*
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            <b>@Html.DisplayNameFor(model => model.{Entity}s)</b>
        </div>
        <div class="col-10">
            @Html.Raw(Model.{Entity}s)
        </div>
    </div>
    *@

    <hr />

    @*
    The Record.Id value of the model will be sent to the Roles controller Delete post action when we click the Yes submit button so that
    the role with the id in the Roles table can be deleted by the delete service method.
    *@
    <form asp-action="Delete">
	    @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Record.Id" />
        <input type="submit" value="Yes" class="btn btn-danger" />&nbsp;&nbsp;
        <a asp-action="Index" class="btn btn-outline-danger">No</a>
    </form>
</div>
}
